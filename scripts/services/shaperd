

########################################################
# Please file all bug reports, patches, and feature
# requests under:
#      https://sourceforge.net/p/logwatch/_list/tickets
# and copy:
#    Paweł Gołaszewski <blues@pld-linux.org>
# Help requests and discusion can be filed under:
#      https://sourceforge.net/p/logwatch/discussion/
########################################################

########################################################
# This was written and is maintained by:
#    Paweł Gołaszewski <blues@pld-linux.org>
########################################################

#####################################################
## Copyright (c) 2008 Paweł Gołaszewski
## Covered under the included MIT/X-Consortium License:
##    http://www.opensource.org/licenses/mit-license.php
## All modifications and contributions by other persons to
## this script are assumed to have been donated to the
## Logwatch project and thus assume the above copyright
## and licensing terms.  If you want to make contributions
## under your own copyright or a different license this
## must be explicitly stated in the contribution an the
## Logwatch project reserves the right to not accept such
## contributions.  If you have made significant
## contributions to this script and want to claim
## copyright please contact logwatch-devel@lists.sourceforge.net.
#########################################################

## Initial initialization:
$DelayIncCount = 0;
$DelayDecCount = 0;
$MaxDelay = 0;
$MinDelay = 0;
$TooOldSoft = 0;

while (defined($ThisLine = <STDIN>)) {
   chomp($ThisLine);
   if (
      ($ThisLine =~ m/^upload ip: /) or
      ($ThisLine =~ m/^download ip: /) or
      ($ThisLine =~ m/^Delay parameter has too low amount for this number of IP's or possibility of server.$/) or
      ($ThisLine =~ m/^Dlay parameter has too high amount./) or
      ($ThisLine =~ m/^starting: LAN Traffic shaper/) or
      ($ThisLine =~ m/^using IP [^ ]* for [^ ]* (local|internet) interface/) or
      ($ThisLine =~ m/^running, PID=/) or
      ($ThisLine =~ m/^divide_upload active/) or
      ($ThisLine =~ m/^Normal termination./) or
      ($ThisLine =~ m/^Initialisation finished/) or
      ($ThisLine =~ m/^HTB3 found - quantum option enabled./) or
      ($ThisLine =~ m/^HTB Upload Class type activated/) or
      ($ThisLine =~ m/^HTB Download Class type activated/) or
      ($ThisLine =~ m/^Continuous traffic control enabled/)
   ) {
      #ignore these
   } elsif ( ($Direction,$Ip) = ($ThisLine =~ /^Can't control ([^ ]*) bandwidth of IP ([^ ]*)$/)) {
      $BandwidthControl{$Direction}{$Ip}++;
   } elsif ( ($Direction,$Ip) = ( $ThisLine =~ /^Removing ([^ ]*) class of IP ([^ ]*)$/ ) ) {
      $RemovingClass{$Direction}{$Ip}++;
   } elsif ( ($Delay) = ( $ThisLine =~ /^Increasing delay to ([0-9]*) seconds$/) ) {
      $IncreasingDelay{$Delay}++;
      $DelayIncCount++;
   } elsif ( ($Delay) = ( $ThisLine =~ /^Decreasing delay to ([0-9]*) seconds$/) ) {
      $DecreasingDelay{$Delay}++;
      $DelayDecCount++;
   } elsif ( $ThisLine =~ m/^It seems that iproute2 didn't work correctly. Please upgrade your iproute2 and\/or kernel./) {
      $TooOldSoft++;
   } else {
      $OtherList{$ThisLine}++;
   }
}

###########################
# Print report:

if ($TooOldSoft > 0) {
   print "\nWarning:\n";
   print "Too old or broken iproute2/kernel reported $TooOldSoft Time(s)\n";
}

if (keys %IncreasingDelay) {
   foreach $Delay (keys %IncreasingDelay) {
      if ($Delay > $MaxDelay) {
         $MaxDelay = $Delay;
      }
   }
   print "\nDelay increased $DelayIncCount Time(s) up to $MaxDelay seconds.\n";
}

if (keys %DecreasingDelay) {
   foreach $Delay (keys %DecreasingDelay) {
      if ($Delay < $MinDelay) {
         $MinDelay = $Delay;
      }
   }
   print "\nDelay decreased $DelayDecCount Time(s) to $MinDelay seconds.\n";
}

if (keys %BandwidthControl) {
   print "\nCan't control bandwidth:\n";
   foreach $Direction (sort {$a cmp $b} keys %BandwidthControl) {
      print "   $Direction:\n";
      foreach $Ip (sort {$a cmp $b} keys %{$BandwidthControl{$Direction}}) {
         print "      $Ip : $BandwidthControl{$Direction}{$Ip} Time(s)\n";
      }
   }
}

if (keys %RemovingClass) {
   print "\nRemoving class for:\n";
   foreach $Direction (sort {$a cmp $b} keys %RemovingClass) {
      print "   $Direction:\n";
      foreach $Ip (sort {$a cmp $b} keys %{$RemovingClass{$Direction}}) {
         print "      $Ip : $RemovingClass{$Direction}{$Ip} Time(s)\n";
      }
   }
}

if (keys %OtherList) {
   print "\n**Unmatched Entries**\n";
   foreach $line (sort {$a cmp $b} keys %OtherList) {
      print "$line: $OtherList{$line} Time(s)\n";
   }
}

exit(0);

# vi: shiftwidth=3 tabstop=3 syntax=perl et
# Local Variables:
# mode: perl
# perl-indent-level: 3
# indent-tabs-mode: nil
# End:
