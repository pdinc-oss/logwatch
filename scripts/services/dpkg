
########################################################
# Please file all bug reports, patches, and feature
# requests under:
#      https://sourceforge.net/p/logwatch/_list/tickets
# Help requests and discusion can be filed under:
#      https://sourceforge.net/p/logwatch/discussion/
########################################################

########################################################
## Copyright (c) 2008 Willi Mann
## Covered under the included MIT/X-Consortium License:
##    http://www.opensource.org/licenses/mit-license.php
## All modifications and contributions by other persons to
## this script are assumed to have been donated to the
## Logwatch project and thus assume the above copyright
## and licensing terms.  If you want to make contributions
## under your own copyright or a different license this
## must be explicitly stated in the contribution an the
## Logwatch project reserves the right to not accept such
## contributions.  If you have made significant
## contributions to this script and want to claim
## copyright please contact logwatch-devel@lists.sourceforge.net.
#########################################################

use strict;

my @install;
my @reinstall;
my @upgrade;
my @remove;
my @purge;
my @conffile;

my @unknown;

while(my $line=<STDIN>) {
	chomp $line;
	if ( my ( $do, $pkg, $ver1, $ver2) = ( $line =~ /^\S+ \S+ (install|upgrade|remove|purge) (\S+) (\S+)(?: (\S+))?/ )) {
		if(($do eq "remove" or $do eq "purge") and ($ver1 ne $ver2) and ($ver2 !~ /^<\w+>$/ )) {
			push @unknown, $line;
		} elsif ($do eq "remove") {
			push @remove, "$pkg $ver1";
		} elsif ( $do eq "purge") {
			push @purge, "$pkg $ver1";
		} elsif ($ver1 =~ /[<>]/) {
			push @install, "$pkg $ver2";
      } elsif ($ver1 eq $ver2) {
        push @reinstall, "$pkg $ver1";
		} else {
			push @upgrade, "$pkg $ver1 => $ver2";
		}
   } elsif ( $line =~ /^\S+ \S+ conffile / ) {
      my ( $conffilename, $action ) = ( $line =~ /^\S+ \S+ conffile (\S+) (\S+)/ );
      push @conffile, "$action $conffilename";
   } elsif ( $line =~ /^\S+ \S+ (status|configure|startup|trigproc) / ) {
		#ignore
	} else {
		push @unknown, $line;
	}
}

my @k = ( "Installed" , \@install,
          "Reinstalled" , \@reinstall,
          "Upgraded" , \@upgrade,
      	 "Removed", \@remove,
	       "Purged", \@purge,
          "Configuration files", \@conffile,
	       "Unknown lines", \@unknown);

while (@k > 0) {
	my $text = shift @k;
	my $array = shift @k;
	if(@$array) {
		print "\n$text:\n";
		foreach my $line (sort @$array) {
			print "   $line\n";
		}

	}
}

# vi: shiftwidth=3 tabstop=3 syntax=perl et
# Local Variables:
# mode: perl
# perl-indent-level: 3
# indent-tabs-mode: nil
# End:
