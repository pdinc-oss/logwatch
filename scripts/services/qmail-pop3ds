
########################################################
# Please file all bug reports, patches, and feature
# requests under:
#      https://sourceforge.net/p/logwatch/_list/tickets
# Help requests and discusion can be filed under:
#      https://sourceforge.net/p/logwatch/discussion/
########################################################

#######################################################
## Copyright (c) 2008 Bob Hutchinson
## Covered under the included MIT/X-Consortium License:
##    http://www.opensource.org/licenses/mit-license.php
## All modifications and contributions by other persons to
## this script are assumed to have been donated to the
## Logwatch project and thus assume the above copyright
## and licensing terms.  If you want to make contributions
## under your own copyright or a different license this
## must be explicitly stated in the contribution an the
## Logwatch project reserves the right to not accept such
## contributions.  If you have made significant
## contributions to this script and want to claim
## copyright please contact logwatch-devel@lists.sourceforge.net.
#########################################################
use strict;

my $Detail         = $ENV{'LOGWATCH_DETAIL_LEVEL'};
my $QmailDetail    = $ENV{'qmail_high_detail'};
my $QmailThreshold = $ENV{'threshold'};
my $ToThreshold    = $ENV{'to_threshold'};
my $FromThreshold  = $ENV{'from_threshold'};

#Init String Containers
my (
$IgnoreUnmatched,       $LocalServer,   $RemoteServer, 
$TotalFrom,             $TotalTo,       $Warning, 
$pid1,                  $pid2,          $threshold_reached,
);
#Init Hashes
my (
%From,      %To,            %Warnings,
);
#Init Arrays
my @OtherList = ();

while (defined(my $ThisLine = <STDIN>)) {
	if (
		( $ThisLine =~ /status: / ) or
		( $ThisLine =~ /end (\d+) status \d+/ ) or
		( $ThisLine =~ / LOG5/ ) or
		( $ThisLine =~ /qmail-popup/ )
		)
	{
		# We don't care about these
	}
	elsif ( ($pid1,$RemoteServer) = ( $ThisLine =~ /pid (\d+) from (.*)/ ) )
	{
		$From{$RemoteServer}++;
		$TotalFrom++;
	}
	elsif ( ($pid2,$LocalServer) = ( $ThisLine =~ /ok (\d+) \d+:(.*):995\s+.*/ ) )
	{
		$To{$LocalServer}++;
		$TotalTo++;
	}
	elsif ( ($Warning) = ( $ThisLine =~ /warning: (.*)/i ) )
	{
		$Warnings{$Warning}++;
	}
	else
	{
		# Report any unmatched entries...
		push @OtherList,$ThisLine;
	}
}

if ($QmailDetail >= 1)
{
	if ($QmailThreshold > 0)
	{
		if (($FromThreshold < 0) or ($FromThreshold eq ''))
		{
			$FromThreshold = $QmailThreshold;
	}
		if (($ToThreshold < 0) or ($ToThreshold eq ''))
		{
			$ToThreshold = $QmailThreshold;
		}
	}

	if (($FromThreshold < 0) or ($FromThreshold eq ''))
	{
		$FromThreshold = 0;
	}
	if (($ToThreshold < 0) or ($ToThreshold eq ''))
	{
		$ToThreshold = 0;
	}

	if ( (keys %From) )
	{
		print "\nConnections from (Threshold of " . $FromThreshold . "):\n";
		$threshold_reached=0;
		foreach my $Line (sort {$From{$b} <=> $From{$a}} keys %From)
		{
			if ($From{$Line} >= $FromThreshold)
			{
				$threshold_reached=1;
				print "\t" . $Line . " - ". $From{$Line} . " Time(s)\n";
			}
		}
		if ($threshold_reached < 1)
		{
			print "\t" . "None found above the threshold\n";
		}
	}

	if ( (keys %To) )
	{
		print "\nConnections to (Threshold of " . $ToThreshold . "):\n";
		$threshold_reached=0;
		foreach my $Line (sort {$To{$b} <=> $To{$a}} keys %To)
		{
			if ($To{$Line} >= $ToThreshold)
			{
				$threshold_reached=1;
				print "\t" . $Line . " - ". $To{$Line} . " Time(s)\n";
			}
		}
		if ($threshold_reached < 1)
		{
			print "\t" . "None found above the threshold\n";
		}
	}
}

if ($TotalFrom or $TotalTo) {
	print "\nTotals:\n";
	print "\tRemote connections $TotalFrom\n";
	print "\tLocal connections $TotalTo\n";
}

if ( (keys %Warnings) ) {
   print "\nWarnings:\n";
   foreach my $Line (sort {$Warnings{$b} <=> $Warnings{$a}} keys %Warnings) {
      print "\t" . $Line . " - ". $Warnings{$Line} . " Time(s)\n";
   }
}

if (($#OtherList >= 0) and (not $IgnoreUnmatched)){
	print "\n**Unmatched Entries**\n";
	print @OtherList;
}

exit(0);

# vi: shiftwidth=3 tabstop=3 syntax=perl et
# Local Variables:
# mode: perl
# perl-indent-level: 3
# indent-tabs-mode: nil
# End:
